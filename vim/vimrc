" Reload vimrc with :so $MYVIMRC

" -------------------------------------------------------------------------------------------------
" Vundle
" -------------------------------------------------------------------------------------------------
" PluginInstall to install
" PluginUpdate to update

filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Editing
Plugin 'Yggdroot/indentLine' " show leading whitespace
" Plugin 'ntpeters/vim-better-whitespace'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'valloric/youcompleteme'
Plugin 'w0rp/ale' " asynch linting

" Git
Plugin 'tpope/vim-fugitive'

" TMUX
Plugin 'benmills/vimux'
Plugin 'christoomey/vim-tmux-navigator'

" Navigation
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'

" Search
Plugin 'dyng/ctrlsf.vim'
Plugin 'petdance/ack2'

" Colors
" Plugin 'dracula/vim'
Plugin 'vim-airline/vim-airline'
Plugin 'airblade/vim-gitgutter'
Plugin 'joshdick/onedark.vim'

call vundle#end()

" -------------------------------------------------------------------------------------------------
" General
" -------------------------------------------------------------------------------------------------

" Change the mapleader from \ to ,
let mapleader=","

" Detect filetypes
filetype plugin indent on

" Allow access to system clipboard
set clipboard=unnamed

" Vim does not need to be compaible with vi
set nocompatible

" Syntax
syntax enable " enable highlighting
set regexpengine=1 " faster

" Rendering
set lazyredraw " only redraw during typing
set ttyfast " smoother redrawing

" Buffers
" set hidden " hide buffers instead of closing
set noswapfile " don't use swap files

" Persist undo history without hidden buffers
set undofile " use an undo file
set undodir=~/.vim/.vimundo/ " remember to make this dir
set undolevels=1000 " how many undos
set undoreload=10000 " number of lines to save for undo

" Visual
set colorcolumn=100 " show max line length marker
set number " show absolute line number on current line
set relativenumber " show relative line numbers
set ruler " show ruler
set showcmd " show current command
set showmatch " show matching brackets

" Error sounds
set visualbell
set noerrorbells " don't beep

" Editing
set autoindent " auto indent
set backspace=2 " backspace works like most other programs
set expandtab " insert spaces with tab
set shiftwidth=4 " number of spaces for autoident
set spelllang=en " spell checker
set tabstop=4 " one tab is 4 spaces

" Text Display
match ErrorMsg '\s\+$' " highlight trailing white space
set conceallevel=1 " enable concealing characters
set diffopt+=vertical " Open diffs vertically
set nowrap " do not wrap words (view)
set textwidth=0 " do not wrap words (insert)

" Save temp files in a global directory
set directory=~/.vim/tmp
set backupdir=~/.vim/tmp

" Source .vimrc after saving it
" Airline disapears on save without a refresh
" vim-better-whitespace stops highlighting as well
if has("autocmd")
    autocmd! BufWritePost *vimrc source $MYVIMRC | AirlineRefresh
endif

" Search
set gdefault
set ignorecase " ignore casing in search
set smartcase " unless search contains a capital
set hlsearch

" insert newlines without entering insert mode
nmap <CR> o<Esc>

" -------------------------------------------------------------------------------------------------
" Colors
" -------------------------------------------------------------------------------------------------

" Color scheme, favorites: darkburn, onedark
colorscheme onedark

let g:airline_section_y = ''
let g:airline_section_z = airline#section#create(['linenr', ' :%3v'])
let g:airline_theme='onedark'

set laststatus=2

" -------------------------------------------------------------------------------------------------
" Bindings
" -------------------------------------------------------------------------------------------------

" Clear search highlighting
nnoremap <backspace> :noh<CR>:<backspace>

" Don't jump on hlsearch
nnoremap * *``

" Pretty-print JSON with \j. Works on a selection or a whole buffer.
nnoremap <leader>j :%!python -m json.tool<CR>:set ft=javascript<CR>
vnoremap <leader>j :!python -m json.tool<CR>:set ft=javascript<CR>

" -------------------------------------------------------------------------------------------------
" Plugins
" -------------------------------------------------------------------------------------------------

" 'Yggdroot/indentLine'
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '.'
let g:indentLine_color_term = 240
let g:indentLine_enabled = 0

" You complete me
set completeopt-=preview
if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_min_num_of_chars_for_completion = 2

" Tmux navigator
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

" NerdTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Statusline
set statusline+=%#warningmsg#
set statusline+=%*

" Ctrlsf
nmap <C-f> <Plug>CtrlSFPrompt
let g:ctrlsf_default_root = 'project'
let g:ctrlsf_winsize = '70%'
let g:ctrlsf_ignore_dir = ['node_modules', 'vendor', 'dist', 'build']
let g:ctrlsf_ackprg = "/usr/local/bin/ack"

" w0rp/ale
let g:ale_lint_on_enter = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '‚óè'

" Quramy/tsuquyomi
autocmd QuickFixCmdPost [^l]* nested cwindow " make Quickfix window appear
autocmd QuickFixCmdPost    l* nested lwindow " make Quickfix window appear

" Nerd Commenter
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDAltDelims_java = 1
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_max_files=0
let g:ctrlp_show_hidden=1
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" benmills/vimux
" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" -------------------------------------------------------------------------------------------------
" Gui
" -------------------------------------------------------------------------------------------------

set guifont=Menlo\ Regular:h14 " font
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar

" -------------------------------------------------------------------------------------------------
" Source files
" -------------------------------------------------------------------------------------------------

" Source file if it exists
function! SourceIfExists(file)
  if filereadable(expand(a:file))
    exe 'source' a:file
  endif
endfunction

call SourceIfExists("~/.vimrc.work")
