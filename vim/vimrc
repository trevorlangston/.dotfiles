" Reload vimrc with :source $MYVIMRC

" -------------------------------------------------------------------------------------------------
" Vundle
" -------------------------------------------------------------------------------------------------
" PluginInstall to install
" PluginUpdate to update
" PluginClean to remove

filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Editing
Plugin 'scrooloose/nerdcommenter'
Plugin 'valloric/youcompleteme'
Plugin 'dense-analysis/ale'

" Git
Plugin 'tpope/vim-fugitive'

" TMUX
Plugin 'christoomey/vim-tmux-navigator'

" Search
Plugin 'dyng/ctrlsf.vim'
Plugin 'petdance/ack2'

" Colors
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-scripts/Solarized'

" Language
Plugin 'fatih/vim-go'
Plugin 'leafgarland/typescript-vim'

" Navifation
Plugin 'preservim/nerdtree'

call vundle#end()

" -------------------------------------------------------------------------------------------------
" General
" -------------------------------------------------------------------------------------------------

" Change the mapleader from \ to ,
let mapleader=","

" Detect filetypes
filetype plugin indent on

" Allow access to system clipboard
set clipboard=unnamedplus

" vim does not need to be compaible with vi
set nocompatible

" Search
set path+=**                        " search into subfolders
set wildmenu                        " display all matching files with tab complete
set wildignore+=*/build/*           " ignore build dir
set wildignore+=*/node_modules/*    " ignore node_modules dir
set wildignore+=*/dist/*            " ignore node_modules dir

" Syntax
syntax enable                   " enable highlighting
set regexpengine=1              " faster syntax highlighting

" language syntax highlighting in markdown
let g:markdown_fenced_languages = ['bash', 'python']

" Rendering
set lazyredraw                  " only redraw during typing
set ttyfast                     " smoother redrawing

" Buffers
set noswapfile                  " don't use swap files

" Persist undo history without hidden buffers
set undofile                    " use an undo file
set undodir=~/.vim/.vimundo/    " remember to make this dir
set undolevels=1000             " how many undos
set undoreload=10000            " number of lines to save for undo

" Visual
set number                      " show absolute line number on current line
set relativenumber              " show relative line numbers
set ruler                       " show ruler in status line
set showcmd                     " show current command
set showmatch                   " show matching brackets
set laststatus=2                " always show status bar

" Error sounds
set visualbell
set noerrorbells                " don't beep

" Editing
set autoindent                  " auto indent
set backspace=2                 " backspace works like most other programs
set expandtab                   " insert spaces with tab
set shiftwidth=4                " number of spaces for autoindent
set tabstop=4                   " one tab is 4 spaces
set spelllang=en                " spell checker

" Text Display
match ErrorMsg '\s\+$'          " highlight trailing white space
set conceallevel=0              " disable concealing characters
set diffopt+=vertical           " open diffs vertically
set nowrap                      " do not wrap words (view)
set textwidth=0                 " do not wrap words (insert)

" Save temp files in a global directory
set directory=~/.vim/tmp
set backupdir=~/.vim/tmp

" Search
set gdefault                    " substitute all matches on a line by default, 'g' flag toggles
set ignorecase                  " ignore casing in search
set smartcase                   " ignore casing unless search contains a capital
set hlsearch                    " highlight all matches of previous search pattern

" Ctags - look in the current directory for tags, and work up the tree towards
" root until one is found
set tags=./tags;/

" -------------------------------------------------------------------------------------------------
" Colors
" -------------------------------------------------------------------------------------------------

let g:solarized_termcolors=16
set background=dark
colorscheme solarized

" -------------------------------------------------------------------------------------------------
" Bindings
" -------------------------------------------------------------------------------------------------

nnoremap <backspace> :noh<CR>:<backspace>   " clear search highlighting
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>   " set working directory to current file

" -------------------------------------------------------------------------------------------------
" Plugins
" -------------------------------------------------------------------------------------------------

" netrw
let g:netrw_liststyle = 3
let g:netrw_keepj = ""

" valloric/youcompleteme
set completeopt-=preview
if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_min_num_of_chars_for_completion = 2

" christoomey/vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

" dyng/ctrlsf
nmap <C-f> <Plug>CtrlSFPrompt
let g:ctrlsf_default_root = 'cwd'
let g:ctrlsf_winsize = '70%'
let g:ctrlsf_ignore_dir = ['node_modules', 'vendor', 'dist', 'build', 'tags', 'coverage']
let g:ctrlsf_ackprg = "/usr/bin/ack"
let g:ctrlsf_auto_focus = { "at": "start" }

" dense-analysis/ale
let g:ale_lint_on_enter = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '‚óè'
let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace']}
let g:ale_fix_on_save = 1

function ALELSPMappings()
    let lsp_found=0
    for linter in ale#linter#Get(&filetype)
        if !empty(linter.lsp) && ale#lsp_linter#CheckWithLSP(bufnr(''), linter)
            let lsp_found=1
        endif
    endfor
    if (lsp_found)
        nnoremap <buffer> gr :ALEFindReferences<cr>
        nnoremap <buffer> gd :ALEGoToDefinition<cr>
        nnoremap <buffer> gy :ALEGoToTypeDefinition<cr>
        nnoremap <buffer> gi :ALEGoToImplementation<cr>
        nnoremap <buffer> gh :ALEHover<cr>

        setlocal omnifunc=ale#completion#OmniFunc
    endif
endfunction
autocmd BufRead,FileType * call ALELSPMappings()

" scrooloose/nerdcommenter
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDAltDelims_java = 1
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1

" -------------------------------------------------------------------------------------------------
" Gui
" -------------------------------------------------------------------------------------------------

if has("gui_running")
    set guioptions-=m                           " remove menu bar
    set guioptions-=T                           " remove toolbar
    set guioptions-=r                           " remove right-hand scroll bar
    set guioptions-=L                           " remove left-hand scroll bar

    if has ("gui_gtk3")
        set guifont=Inconsolata\ 12
    endif
endif

" -------------------------------------------------------------------------------------------------
" Source other rc files
" -------------------------------------------------------------------------------------------------

" Source file if it exists
function! SourceIfExists(file)
  if filereadable(expand(a:file))
    exe 'source' a:file
  endif
endfunction

call SourceIfExists("~/.vimrc.work")
call SourceIfExists("mispellings")

" -------------------------------------------------------------------------------------------------
" File templates
" -------------------------------------------------------------------------------------------------
autocmd BufNewFile *.sh 0r ~/.dotfiles/vim/skeletons/bash.sh
