" Vundle
" ':PluginInstall' to install
" ':PluginUpdate' to update
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugin 'Quramy/tsuquyomi'
Plugin 'VundleVim/Vundle.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'benmills/vimux'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'dyng/ctrlsf.vim'
Plugin 'fatih/vim-go'
Plugin 'flazz/vim-colorschemes'
Plugin 'kien/ctrlp.vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'othree/html5.vim'
Plugin 'petdance/ack2'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'valloric/youcompleteme'
Plugin 'vim-airline/vim-airline'
Plugin 'w0rp/ale'

call vundle#end()
filetype plugin indent on

" ----------------------------
" General
" ----------------------------

set noswapfile " don't use swap files
set nocompatible " vim does not need to be compaible with vi
let mapleader="," " change the mapleader from \ to ,
set hidden " hide buffers instead of closing
set textwidth=0 " do not wrap words (insert)
set nowrap " do not wrap words (view)
set showmatch " show matching brackets
set expandtab " insert spaces with tab
set autoindent " auto indent
set shiftwidth=4 " number of spaces for autoident
set tabstop=4 " one tab is 4 spaces
set clipboard=unnamed " allow access to system clipboard
set colorcolumn=100 " Show max line length marker
set showcmd " Show current command
set ruler " Show ruler
set relativenumber " Show relative line numbers
set number " Show absolute line number on current line
set diffopt+=vertical " Open diffs vertically
match ErrorMsg '\s\+$' " Highlight trailing white space
set ttyfast " smoother redrawing 
set lazyredraw " only redraw during typing

" don't beep
set visualbell
set noerrorbells

" Color scheme, favorites: luna, darkburn, onedark, solarized
syntax enable
colorscheme onedark

" Save temp files in a global directory 
set directory=~/.vim/tmp
set backupdir=~/.vim/tmp

" Source .vimrc after saving it
if has("autocmd")
    autocmd! bufwritepost *vimrc source $MYVIMRC
endif

" Search
set gdefault
set hlsearch
set ignorecase
set smartcase

" ----------------------------
" Bindings
" ----------------------------

" Clear search highlighting
nnoremap <backspace> :noh<CR>:<backspace>

" Pretty-print JSON with \j. Works on a selection or a whole buffer.
nnoremap <leader>j :%!python -m json.tool<CR>:set ft=javascript<CR>
vnoremap <leader>j :!python -m json.tool<CR>:set ft=javascript<CR>

" ----------------------------
" Bundles
" ----------------------------

" You complete me
set completeopt-=preview
if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_min_num_of_chars_for_completion = 2
" let g:ycm_semantic_triggers['typescript'] = ['.']

" Tmux navigator
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

" NerdTree
" set autoread
" autocmd vimenter * NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Statusline
set statusline+=%#warningmsg#
set statusline+=%*

" Ctrlsf
nmap <C-S> <Plug>CtrlSFPrompt
let g:ctrlsf_default_root = 'project'
let g:ctrlsf_winsize = '70%'

" Aw0rp/ale
let g:ale_sign_column_always = 1
let g:ale_lint_delay = '500'
" let g:ale_linters = {
" \   'typescript': ['tslint'],
" \}

" Quramy/tsuquyomi
autocmd QuickFixCmdPost [^l]* nested cwindow " make Quickfix window appear
autocmd QuickFixCmdPost    l* nested lwindow " make Quickfix window appear

" Nerd Commenter
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDAltDelims_java = 1
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1

" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" Airline
let g:airline#extensions#ale#enabled = 1

" benmills/vimux
" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" ----------------------------
" Gui
" ----------------------------

set guifont=Menlo\ Regular:h14 " font
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar

" ----------------------------
" Languages
" ----------------------------

" Go 
" Use tabs, displayed as 8 spaces
au BufNewFile,BufRead *.go setlocal noet tabstop=4 shiftwidth=4 softtabstop=4
let g:go_fmt_fail_silently = 1
let g:go_list_type = ""
